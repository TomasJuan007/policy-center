策略中心相关概念：
应用-策略中心以应用作为控制规则管理权限的粒度，通过对规则管理员的鉴权和授权，确保不同应用之间的规则管理不会互相影响
规则命名空间-规则匹配时的控制粒度，对于同一个应用，匹配全量的规则有时候会耗费多余的计算，因此对不同场景划分规则空间，对特定场景只匹配规则空间内的规则
事实数据-用于规则匹配的输入，可能是根据不同用户（或其他实体）在数据库获取的用户属性，也可能是前端传参的环境属性
事实获取key-用于获取用户（或其他实体）的事实数据的唯一标识
规则维度-规则维度指的是用于匹配时参考的维度，比如
维度属性值-具体匹配场景下，某个规则维度的值
规则-策略中心的规则是对不同规则维度的属性值的限定，由一个或一个以上的规则模式组成，规则模式之间可能是与和或的逻辑关系，与和或的关系不显式保存，通过数据结构确定
规则模式-一个规则模式由规则维度、关系运算符、对比值三部分组成，通过与事实数据匹配，每个规则模式对一组事实数据都有匹配和不匹配两种结果
关系运算符-类似于大于小于等比较关系，也可以是等同于、包含于等关系，或其他后续扩展支持的关系运算符
对比值-规则模式中对某一个维度进行对比的值

策略中心运作流程：
1.应用开发人员同步用户（或其他实体数据）到后台的数据库，保持数据更新
2.应用开发人员在规则维度管理界面管理规则维度
3.规则管理员按照需求到规则管理界面配置规则，选定规则维度，选择关系运算符和输入对比值作为一组条件，配置不同维度最终保存规则
4.应用端传事实获取key和环境参数，进行规则匹配，后台先获取全部的事实数据，再取数据库中对应规则空间的数据，二者进行匹配，如果所有条件都有规则模式匹配，则将该规则添加到匹配列表中返回

1.如果需要支持不同维度或逻辑的计算，那么不可避免地要采用树状结构保存规则，出于管理规则的方便，策略中心没有采用最灵活的规则，不同维度之间只支持与的关系，这是对规则灵活和操作门槛的折衷
2.考虑到大量规则计算的实际需求，对于规则管理的性能要求可以降低，而规则匹配性能要求需要提高，因此采用内存缓存直接缓存所有规则空间的规则数据，在规则变动时更新缓存，匹配时不需要再做关联直接从内存缓存获取
3.对于对比值内容比较大的场景，提供黑白名单支持，将数值型的黑白名单，采用压缩位图（RoaringBitmap）保存到数据库，并与规则一同缓存到内存
4.由于大量地使用内存缓存，因此需要对每个应用接入方做好资源的限制，通过限制规则数量和黑白名单数量，以及限制黑白名单压缩后容量在65KB以内，确保不对内存和CPU造成影响
5.采用多线程处理规则匹配，对规则模式设置优先级，如果优先级高的规则可以确定规则是否匹配，就不需要进行多余的计算